from Crypto.Util.number import *


p = 10146773325533229741468691840422910001468996400807084249280779456965143161961839545458403099606805282458187818594085025470594360600751626610765379908731629
q = 11489576851183514819502523229865734113608767621210789872062680340601658543598586264789889684592206237380911006985111594197926447759936389656248555089128511
e = 65537
c = 0x94753b406f6822b14712d81a4c01c113568fd28951507d8fc16fd21080be0047871be92f1d7bf1762e273d7d8bb6b9d33b960844f70b253c2818f14a3e4922e541b2cca4ae6d934a77117b24fc79c0730da2970eb71ca8e2ba638ac1b0bb93b064baa4902846e1943b00a215c4d2ed0cd582f5b9dfaab19845d57305108b133b

def create_keypair(size):
    p = getPrime(size // 2)
    q = getPrime(size // 2)
    N = p * q
    phi = (p - 1) * (q - 1)
    e = 0x10001
    d = inverse(e, phi)


def encrypt(self):
    m_ = bytes_to_long(self.m)
    c = pow(m_, self.e, self.N)
    return hex(c)

phi = (p-1)*(q-1)
N = p * q
d = inverse(e, phi)
m = pow(c,d,N)
print("m=",long_to_bytes(m))