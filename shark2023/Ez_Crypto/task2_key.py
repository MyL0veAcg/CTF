import uuid
from Crypto.Util.number import *
import gmpy2


c1= [26, 26, 119, 113, 1, 113, 123, 11]
c2= [201328905, 1426348036, 1634483819]
c3= b'5k/\x9a\x85\xd4\xd9Qw\xe1\xa3\xac\x14\x8b\xa7W\xf9|I00FZ\x95$o\xc9\x1cH\x8aj\xec<\x87\x1e\x11+\xb6\xe8\x9f\x1f\x04\x17GF\t\xd4\xbd&\x9aS\x9d\x07\xa3\xc8$\x90\x86\x90\x04%{\x92\xf8\x08\x19\x8a\xc9C8 \x1cn\xec\x96p\x1d\xc2"\xe1\x8d4\xd1\n7\xf8\xfeR\x1b/\x9e\xd4\x9b\xd9\xc7\xe2o\x80\xce\x12|\xdf\x00\xf4\xbd\x03\x05r\x9ee\x1b\xd4\x11T\x8d\x0e\x1d\xe8-\xeed\xa9\xd8AV\xe2\x84\xad,\xed\xbf\xb8>\xe4\xdedII6\x1a'
hint1=4986949479007082729716547685792627780617093828171540677702075938757801891201052761270630721263960429321065193253397597523246181608975705273548579723144622804507444016631296194606057824900271011959327629653316369200151201808811448282746505296491906546373465706332638001386245070157282836283702547781497523095057753031082885717948281728175245087033143124182772781094686101795038145373427441501845939253012979365632413100360618371076085699645077828302505360039472957811728893485848576278599522458313993406600121486196344205217244526055869206205612152700232089103171346678416402225684671681032752534997380942948837756353481122859334994438823946475756069022787457747456676570244791021337571126408580640966502203885520122171450096590107228038188337213053078201008158529512647742757430840610428945725453320872375323048603112220109884127240615612226369314056714482329266553579213586354218329557550477477407636686565218950180899369684
hint2=1574913585970610982654880172525236144770802523502723708527126412387463090239144882774026308707535676522452148643280146748244139354608476107639041492039034028509752029787461688024714288260647443029156646910891572827294545106737574620609826698898435575413030287473359930221291548249675273255406107351999936484333865852493518472677240999910613851305645619541750070652417821232958606602345883575540551936663301611431114024165923011870242273375253909103247281692370011
#66c9d94e-21af-40eb-8f35-d98fbe1bf20d

def enc1(m):
    c=[]
    for i in m:
        c.append( (5*i+7) %128)
    return c

# def exp1():
def exp1(c):                     #
    d = inverse(5 ,128)
    # a = []
    m = ''                        #        
    for k in c:                          
    # for k in c1:
        # a.append(long_to_bytes((k - 7)* d % 128))    
        m += chr((k-7)*d % 128)    #     
    print("m[0]=",m)
    # return m
# def dec1(c):
# m = ""
# a_1 = gmpy2.invert(5, 128)
# b = 7
# for i in c:
# m += chr((i-b)*a_1 % 128)
# return m.encode()

def enc2(m):
    m.append(b"^_^")
    c=[]
    for i in range(1,4):
        c.append(bytes_to_long(m[i-1])^bytes_to_long(m[i]))
    return c

def exp2(c):
    """
    a^b^b = a
    已知最后异或的字符串为b"^_^"
    从后往前异或，就可以一个一个的推出前面的值
    """
    c.append(bytes_to_long(b'^_^'))
    c.reverse()
    m = []
    m.append(c[0]^c[1])
    for i in range(1,3):
        m.append(m[i-1]^c[i+1])
                                                                                                                                                                                                                                                                   
    m.reverse()
    print("m[1],m[2],m[3]=",list(map(long_to_bytes, m)))
    # return m        
        
    
def enc3(m):
    res=getPrime(1024)
    e=getPrime(16)
    d=getPrime(512)
    hint1=res**3-e**5
    hint2=res*d
    c=res*bytes_to_long(m)
    return long_to_bytes(c)

def exp3(c):
    res = gmpy2.iroot(hint1, 3)[0]       #先求出一个和res相差不多的基数，注意iroot返回值为元组
    c = bytes_to_long(c)        
    while True:
        res = gmpy2.next_prime(res)   #在基数的基础上一个一个的尝试质数  
        if hint2 % res == 0:
            # print("c/res = ",c/res)     #c/res = 1.7395495237452763e+28
            m = c//res                    #所以不能用/,算出来为浮点数 
            break
    print("m[5]=",long_to_bytes(m))    
    # return m


# print(b'SharkCTF{'+dec1(c1)+b'-'+x+dec3(c3,hint1,hint2)+b'}')
exp1(c1)
exp2(c2)
exp3(c3)